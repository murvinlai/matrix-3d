{
  "name": "mathjs",
  "version": "0.11.1",
  "description": "Math.js is an extensive math library for JavaScript and Node.js. It features real and complex numbers, units, matrices, a large set of mathematical functions, and a flexible expression parser.",
  "author": {
    "name": "Jos de Jong",
    "email": "wjosdejong@gmail.com"
  },
  "contributors": [
    {
      "name": "Jos de Jong",
      "email": "wjosdejong@gmail.com"
    }
  ],
  "homepage": "http://mathjs.org",
  "repository": {
    "type": "git",
    "url": "git://github.com/josdejong/mathjs.git"
  },
  "keywords": [
    "math",
    "mathematics",
    "functions",
    "numeric",
    "parser",
    "expression",
    "real",
    "complex",
    "matrix",
    "unit"
  ],
  "dependencies": {},
  "devDependencies": {
    "jake": ">= 0.5.9",
    "tap": ">= 0.4.3",
    "numbers": "0.4.0",
    "uglify-js": ">= 2.2.5",
    "dateable": ">= 0.1.2"
  },
  "scripts": {
    "test": "jake test --trace"
  },
  "main": "./math.js",
  "bin": {
    "mathjs": "./bin/cli.js"
  },
  "engines": {
    "node": "*"
  },
  "readme": "![math.js](https://raw.github.com/josdejong/mathjs/master/img/mathjs.png)\n\n[http://mathjs.org](http://mathjs.org)\n\nMath.js is an extensive math library for JavaScript and Node.js.\nIt features a flexible expression parser and offers an integrated solution\nto work with real and complex numbers, units, and matrices.\nPowerful and easy to use.\n\n\n## Features\n\n- Supports numbers, complex numbers, units, strings, arrays, and matrices.\n- Is compatible with JavaScriptâ€™s built-in Math library.\n- Contains a flexible expression parser.\n- Supports chained operations.\n- Comes with a large set of built-in functions and constants.\n- Has no dependencies. Runs on any JavaScript engine.\n- Can be used as a command line application as well.\n- Is easily extensible.\n\n\n## Install\n\n### npm\nMath.js can be installed using [npm](https://npmjs.org/):\n\n    npm install mathjs\n\nNote: when installed globally (using the `-g` option), math.js is available as\na command line application `mathjs`, see section\n[command line interface](#command-line-interface-cli).\n\n### bower\nOr using [bower](http://twitter.github.io/bower/):\n\n    bower install mathjs\n\n### download\nOr by downloading the latest version from\n[mathjs.org](http://mathjs.org/#install_or_download):\n\n- [math.js](http://mathjs.org/js/lib/math.js) (Development version)\n- [math.min.js](http://mathjs.org/js/lib/math.min.js) (Production version)\n\n\n## Load\n\n### Node.js\n\nLoad math.js in [node.js](http://nodejs.org/):\n\n```js\nvar math = require('mathjs');\n\nmath.sqrt(-4); // 2i\n```\n\n### Browser\n\nMath.js can be loaded as a regular javascript file in the browser:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n    <script src=\"math.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <script type=\"text/javascript\">\n        math.sqrt(-4); // 2i\n    </script>\n</body>\n</html>\n```\n\n### Require.js\n\nLoad math.js in the browser using [require.js](http://requirejs.org/):\n\n```js\nrequire.config({\n    paths: {\n        mathjs: 'path/to/mathjs',\n    }\n});\nrequire(['mathjs'], function (math) {\n    math.sqrt(-4); // 2i\n});\n```\n\n\n## Use\n\nMath.js can be used similar to JavaScript's built-in Math library. Besides that,\nmath.js can evaluate expressions (see [Expressions](#expressions)) and supports\nchained operations (see [Chained operations](#chained-operations)).\n\nThe example code below shows how to use math.js. More examples can be found in the\n[examples directory](https://github.com/josdejong/mathjs/tree/master/examples/).\n\n```js\n// load math.js\nvar math = require('mathjs');\n\n// functions and constants\nmath.round(math.e, 3);            // 2.718\nmath.atan2(3, -3) / math.pi;      // 0.75\nmath.log(1000, 10);               // 3\nmath.sqrt(-4);                    // 2i\nmath.pow([[-1, 2], [3, 1]], 2);   // [[7, 0], [0, 7]]\n\n// expressions\nmath.eval('12 / (2.3 + 0.7)');    // 4\nmath.eval('5.08 cm in inch');     // 2 inch\nmath.eval('sin(45 deg) ^ 2');     // 0.5\nmath.eval('9 / 3 + 2i');          // 3 + 2i\nmath.eval('det([-1, 2; 3, 1])');  // -7\n\n// chained operations\nmath.select(3)\n    .add(4)\n    .multiply(2)\n    .done(); // 14\n```\n\n\n## Expressions\n\nMath.js contains a flexible and easy to use expression parser.\nThe parser supports all data types, methods and constants available in math.js.\nExpressions can be evaluated in various ways:\n\n- Using the function [`math.eval(expr [,scope])`](#eval).\n- Using the function [`math.parse(expr [,scope])`](#parse).\n- By creating a [parser](#parser), `math.parser()`, which contains functions\n  `eval`, `parse`, and keeps a scope with assigned variables in memory.\n\n\n### Eval\n\nMath.js comes with a function `math.eval` to evaluate expressions. Syntax:\n\n```js\nmath.eval(expr)\nmath.eval(expr, scope)\nmath.eval([expr1, expr2, expr3, ...])\nmath.eval([expr1, expr2, expr3, ...], scope)\n```\n\nFunction `eval` accepts a single expression or an array with\nexpressions as first argument, and has an optional second argument\ncontaining a scope with variables and functions. The scope is a regular\nJavaScript Object. The scope will be used to resolve symbols, and to write\nassigned variables or function.\n\nThe following code demonstrates how to evaluate expressions.\n\n```js\n// load math.js\nvar math = require('mathjs');\n\n// evaluate expressions\nmath.eval('sqrt(3^2 + 4^2)');           // 5\nmath.eval('sqrt(-4)');                  // 2i\nmath.eval('2 inch in cm');              // 5.08 cm\nmath.eval('cos(45 deg)');               // 0.7071067811865476\n\n// provide a scope\nvar scope = {\n    a: 3,\n    b: 4\n};\nmath.eval('a * b', scope);              // 12\nmath.eval('c = 2.3 + 4.5', scope);      // 6.8\nscope.c;                                // 6.8\n```\n\n### Parse\n\nMath.js contains a function `math.parse` to parse expressions into a node\ntree. The syntax is similar to [`math.eval`](#eval):\n\n```js\nmath.parse(expr)\nmath.parse(expr, scope)\nmath.parse([expr1, expr2, expr3, ...])\nmath.parse([expr1, expr2, expr3, ...], scope)\n```\n\nFunction `parse` accepts a single expression or an array with\nexpressions as first argument, and has an optional second argument\ncontaining a scope with variables and functions. The scope is a regular\nJavaScript Object. The scope will be used to resolve symbols, and to write\nassigned variables or function. Variables are linked dynamically to the\nprovided scope.\n\nExample usage:\n\n```js\n// load math.js\nvar math = require('mathjs');\n\n// parse an expression into a node, and evaluate the node\nvar node1 = math.parse('sqrt(3^2 + 4^2)');\nnode1.eval(); // 5\n\n// provide a scope\nvar scope = {\n    x: 3,\n    a: 2\n};\nvar node2 = math.parse('x^a', scope);\nnode2.eval(); // 9\n\n// change a value in the scope and re-evaluate the node\nscope.a = 3;\nnode2.eval(); // 27\n```\n\n\n### Parser\n\nIn addition to the static functions [`math.eval`](#eval) and\n[`math.parse`](#parse), math.js contains a parser with functions `eval` and\n`parse`, which automatically keeps a scope with assigned variables in memory.\nThe parser also contains some convenience methods to get, set, and remove\nvariables from memory.\n\nA parser can be created by:\n\n```js\nvar parser = math.parser();\n```\n\nThe parser contains the following methods:\n\n- `clear()`\n  Completely clear the parsers scope.\n- `eval(expr)`\n  Evaluate an expression.\n- `get(name)`\n  Retrieve a variable or function from the parsers scope.\n- `parse(expr)`\n  Parse an expression into a node tree.\n- `remove(name)`\n  Remove a variable or function from the parsers scope.\n- `set(name, value)`\n  Set a variable or function in the parsers scope.\n  A node can be evaluated as `node.eval()`.\n\nThe following code shows how to create and use a parser.\n\n```js\n// load math.js\nvar math = require('mathjs');\n\n// create a parser\nvar parser = math.parser();\n\n// evaluate expressions\nparser.eval('sqrt(3^2 + 4^2)');         // 5\nparser.eval('sqrt(-4)');                // 2i\nparser.eval('2 inch in cm');            // 5.08 cm\nparser.eval('cos(45 deg)');             // 0.7071067811865476\n\n// define variables and functions\nparser.eval('x = 7 / 2');               // 3.5\nparser.eval('x + 3');                   // 6.5\nparser.eval('function f(x, y) = x^y');  // f(x, y)\nparser.eval('f(2, 3)');                 // 8\n\n// get and set variables and functions\nvar x = parser.get('x');                // x = 7\nvar f = parser.get('f');                // f = function\nvar g = f(3, 3);                        // g = 27\nparser.set('h', 500);\nparser.eval('h / 2');                   // 250\nparser.set('hello', function (name) {\n    return 'hello, ' + name + '!';\n});\nparser.eval('hello(\"user\")');           // \"hello, user!\"\n\n// clear defined functions and variables\nparser.clear();\n```\n\n\n## Chained operations\n\nMath.js supports chaining operations by wrapping a value into a `Selector`.\nA selector can be created with the function `math.select(value)`.\nAll methods available in the math namespace can be executed via the selector.\nThe methods will be executed with the selectors value as first argument,\nfollowed by extra arguments provided by the function call itself.\n\n```js\nmath.select(3)\n    .add(4)\n    .subtract(2)\n    .done(); // 5\n\nmath.select( [[1, 2], [3, 4]] )\n    .set([1, 1], 8)\n    .multiply(3)\n    .done(); // [[24, 6], [9, 12]]\n```\n\nThe Selector has a number of special functions:\n\n - `done()`\n   Finalize the chained operation and return the selectors value.\n - `valueOf()`\n   The same as `done()`, returns the selectors value.\n - `toString()`\n   Executes `math.format(value)` onto the selectors value, returning\n   a string representation of the value.\n - `get(index)`\n   Get a subselection of the selectors value. Only applicable when\n   the value has a function get, for example when value is a Matrix\n   or Array.\n - `set(index, replacement)`\n   Replace a subselection of the selectors value. Only applicable\n   when the value has a function get, for example when value is a\n   Matrix or Array.\n\n\n## Data types\n\nMath.js supports both native data types like Number, String, and Array,\nas well as advanced data types like Complex and Unit.\n\n### Number\n\nThe built-in type Number can be used in all methods.\n\n```js\nmath.subtract(7.1, 2.3);        // 4.8\nmath.round(math.pi, 3);         // 3.142\nmath.sqrt(new Number(4.41e2));  // 21\n```\n\n### String\n\nThe built-in type String can be used in applicable methods.\n\n```js\nmath.add('hello ', 'world');    // 'hello world'\nmath.max('A', 'D', 'C');        // 'D'\n```\n\n### Complex\n\nMath.js supports complex numbers. Most methods can be executed with complex\nnumbers as arguments.\n\n```js\nvar a = math.complex(2, 3);     // 2 + 3i\na.re;                           // 2\na.im;                           // 3\nvar b = math.complex('4 - 2i'); // 4 - 2i\nmath.add(a, b);                 // 6 + i\nmath.sqrt(-4);                  // 2i\n```\n\n### Unit\n\nMath.js supports units. Basic operations `add`, `subtract`, `multiply`,\nand `divide` can be performed on units.\nTrigonometric methods like `sin` support units with an angle as argument.\nUnits can be converted from one to another using function `in`,\nan the value of a unit can be retrieved using `toNumber`.\n\n```js\nvar a = math.unit(55, 'cm');    // 550 mm\nvar b = math.unit('0.1m');      // 100 mm\nmath.add(a, b);                 // 0.65 m\nb.in('cm');                     // 10 cm  Alternatively: math.in(b, 'cm')\nb.toNumber('cm');               // 10\n\nmath.eval('2 inch in cm');      // 5.08 cm\nmath.eval('cos(45 deg)');       // 0.7071067811865476\n```\n\n### Array and Matrix\n\nMath.js supports n-dimensional arrays and matrices. Both regular JavaScript\n`Array` and the math.js `Matrix` can be used interchangeably in all math.js\nfunctions.\n\nA `Matrix` is an object wrapped around a regular JavaScript Array, providing\nutility methods for easy matrix manipulation such as `get`, `set`, `size`,\n`resize`, `clone`, and more.\n\nMatrix indexes in math.js are zero-based, like most programming languages\nincluding JavaScript itself. Note that mathematical applications like Matlab\nand Octave use one-based indexes.\n\n```js\nvar matrix = math.matrix([1, 4, 9, 16, 25]);    // Matrix, [1, 4, 9, 16, 25]\nmath.sqrt(matrix);                              // Matrix, [1, 2, 3, 4, 5]\n\nvar array = [1, 2, 3, 4, 5];\nmath.factorial(array);                          // Array,  [1, 2, 6, 24, 120]\n\nvar a = [[1, 2], [3, 4]];                       // Array,  [[1, 2], [3, 4]]\nvar b = math.matrix([[5, 6], [1, 1]]);          // Matrix, [[5, 6], [1, 1]]\nb.set([2, [1, 2]], [[7, 8]]);                   // Matrix, [[5, 6], [7, 8]]\nvar c = math.multiply(a, b);                    // Matrix, [[19, 22], [43, 50]]\nvar d = c.get([1, 0]);                          // 43\n```\n\nMatrices are supported by the parser:\n\n```js\nparser = math.parser();\n\nparser.eval('a = [1, 2; 3, 4]');                // Matrix, [[1, 2], [3, 4]]\nparser.eval('b = zeros(2, 2)');                 // Matrix, [[0, 0], [0, 0]]\nparser.eval('b(0, 0:1) = [5, 6]');              // Matrix, [[5, 6], [0, 0]]\nparser.eval('b(1, :) = [7, 8]');                // Matrix, [[5, 6], [7, 8]]\nparser.eval('c = a * b');                       // Matrix, [[19, 22], [43, 50]]\nparser.eval('d = c(1, 0)');                     // 43\nparser.eval('e = c(1, 0:end)');                 // Matrix, [[43, 50]]\n```\n\n\n### Range\n\nA `Range` creates a range with a start, end, and optionally a step.\nA `Range` can be used to create indexes to get or set submatrices.\n\n```js\nvar math = require('math.js');\n\nmath.factorial(math.range(1,5));                // Array,  [1, 2, 6, 24, 120]\n\nvar a = math.matrix();                          // Matrix, []\na.set([math.range('2:5')], [7, 2, 1, 5]);       // Matrix, [0, 7, 2, 1, 5]\n\nvar b = math.range(2, -1, -2);                  // Range, 2:-1:-2\nvar c = b.valueOf();                            // Array,  [2, 1, 0, -1, -2]\n\nvar d = math.eval('3:7');                       // Range, 3:7\n```\n\n\n## Constants\n\nMath.js has the following built-in constants.\n\n- math.E, math.e\n- math.I, math.i\n- math.Infinity\n- math.LN2\n- math.LN10\n- math.LOG2E\n- math.LOG10E\n- math.NaN\n- math.PI, math.pi\n- math.SQRT1_2\n- math.SQRT2\n\n\n## Operators\n\nThe following operators are available in the expression parser of math.js.\n\n- x + y (add)\n- x - y (subtract)\n- x * y (multiply)\n- x .* y (element-wise multiply)\n- x / y (divide)\n- x ./ y (element-wise divide)\n- x % y (mod)\n- x ^ y (power)\n- x ^ y (element-wise power)\n- -y (unary minus)\n- y' (transpose)\n- y! (factorial)\n- x = y (assignment)\n- x : y (range)\n- x in y (unit conversion)\n- x == y (equal)\n- x != y (unequal)\n- x < y (smaller)\n- x > y (larger)\n- x <= y (smallereq)\n- x >= y (largereq)\n\n\n## Methods\n\nMath.js contains the following methods. The methods support all available data\ntypes (Number, Complex, Unit, String, and Array) where applicable.\n\n### Arithmetic\n\n- math.abs(x)\n- math.add(x, y)\n- math.ceil(x)\n- math.cube(x)\n- math.divide(x, y)\n- math.edivide(x, y)\n- math.emultiply(x, y)\n- math.epow(x, y)\n- math.equal(x)\n- math.exp(x)\n- math.fix(x)\n- math.floor(x)\n- math.gcd(a, b, c, ...)\n- math.larger(x, y)\n- math.largereq(x, y)\n- math.lcm(a, b, c, ...)\n- math.log(x [, base])\n- math.log10(x)\n- math.mod(x, y)\n- math.multiply(x, y)\n- math.pow(x, y)\n- math.round(x [, n])\n- math.sign()\n- math.smaller(x, y)\n- math.smallereq(x, y)\n- math.subtract(x, y)\n- math.sqrt(x)\n- math.square(x)\n- math.unary(x)\n- math.unequal(x)\n- math.xgcd(a, b)\n\n### Complex\n\n- math.re(x)\n- math.im(x)\n- math.arg(x)\n- math.conj(x)\n\n### Construction\n\n- math.boolean(x)\n- math.complex(re, im)\n- math.matrix(x)\n- math.number(x)\n- math.parser()\n- math.range(start [, step] , end)\n- math.string(x)\n- math.unit(x)\n\n### Matrix\n\n- math.concat(a, b, c, ... [, dim])\n- math.det(x)\n- math.diag(x)\n- math.eye(m, n, p, ...)\n- math.inv(x)\n- math.ones(m, n, p, ...)\n- math.size(x)\n- math.squeeze(x)\n- math.subset(x, index [, replacement])\n- math.transpose(x)\n- math.zeros(m, n, p, ...)\n\n### Probability\n\n- math.factorial(x)\n- math.random()\n\n### Statistics\n\n- math.max(a, b, c, ...)\n- math.min(a, b, c, ...)\n\n### Trigonometry\n\n- math.acos(x)\n- math.asin(x)\n- math.atan(x)\n- math.atan2(y, x)\n- math.cos(x)\n- math.cot(x)\n- math.csc(x)\n- math.sec(x)\n- math.sin(x)\n- math.tan(x)\n\n### Units\n\n- math.in(x, unit)\n\n### Utils\n\n- math.clone(x)\n- math.eval(expr [, scope])\n- math.format([template, ] values)\n- math.help(text)\n- math.import(filename | object, override)\n- math.select([x])\n- math.parse(expr [, scope])\n- math.typeof(x)\n\n\n## Extend\n\nThe library can easily be extended with functions and variables using the\n`import` function. The function `import` accepts a filename or an object with\nfunctions and variables.\n\n```js\nvar math = require('mathjs');\n\n// define new functions and variables\nmath.import({\n    myvalue: 42,\n    hello: function (name) {\n        return 'hello, ' + name + '!';\n    }\n});\n\n// defined methods can be used in both JavaScript as well as the parser\nmath.myvalue * 2;               // 84\nmath.hello('user');             // 'hello, user!'\n\nvar parser = math.parser();\nparser.eval('myvalue + 10');    // 52\nparser.eval('hello(\"user\")');   // 'hello, user!'\n```\n\nExternal libraries like\n[numbers.js](https://github.com/sjkaliski/numbers.js) and\n[numeric.js](http://numericjs.com/) can be imported as well.\nThe libraries must be installed using npm:\n\n    npm install numbers\n    npm install numeric\n\nThe libraries can be easily imported into math.js using `import`. By default,\nexisting functions will not be overwritten, and math.js will create a wrapper\nfunction around the imported functions which converts data types like `Matrix`\nto primitive types like `Array`.\n\n```js\nvar math = require('mathjs');\n\n// import the numbers.js and numeric.js libraries into math.js\nmath.import('numbers');\nmath.import('numeric');\n\n// use functions from numbers.js\nmath.fibonacci(7);                          // 13\nmath.eval('fibonacci(7)');                  // 13\n\n// use functions from numeric.js\nmath.eval('eig([1, 2; 4, 3])').lambda.x;    // [5, -1]\n```\n\n\n## Command Line Interface (CLI)\n\nWhen math.js is installed globally using npm, its expression parser can be used\nfrom the command line. To install math.js globally:\n\n    npm install -g mathjs\n\nNormally, a global installation must be run with admin rights (precede the\ncommand with `sudo`). After installation, the application `mathjs` is available:\n\n```bash\n$ mathjs\n> 12 / (2.3 + 0.7)\n4\n> 5.08 cm in inch\n2 inch\n> sin(45 deg) ^ 2\n0.5\n> 9 / 3 + 2i\n3 + 2i\n> det([-1, 2; 3, 1])\n-7\n```\n\nThe command line interface can be used open a prompt, to execute a script,\nor to pipe input and output streams:\n\n```bash\n$ mathjs                                 # Open a command prompt\n$ mathjs script.txt                      # Run a script file, output to console\n$ mathjs script.txt > results.txt        # Run a script file, output to file\n$ cat script.txt | mathjs                # Run input stream, output to console\n$ cat script.txt | mathjs > results.txt  # Run input stream, output to file\n```\n\n\n## Build\n\nFirst clone the project from github:\n\n    git clone git://github.com/josdejong/mathjs.git\n\nThe project uses [jake](https://github.com/mde/jake) as build tool.\nTo be able to run jake from the command line, jake must be installed globally:\n\n    sudo npm install -g jake\n\nThen, the project can be build by executing jake in the root of the project:\n\n    cd mathjs\n    jake\n\nThis will build the library math.js and math.min.js from the source files and\nexecute tests.\n\n\n## Test\n\nTo execute tests for the library, run:\n\n    npm test\n\n\n## Contribute\n\nWe can't do this alone. Contributions to the math.js library are very welcome!\nYou can contribute in different ways: spread the word, report bugs, come up with\nideas and suggestions, and contribute to the code.\n\nThere are a few preferences regarding code contributions:\n\n- Send pull requests to the `develop` branch, not the `master` branch.\n- Only commit changes done in the source files under `src`, not to the library\n  builds `math.js` and `math.min.js`.\n\nThanks!\n\n\n## Roadmap\n\nVersion 1.0:\n\n- An expression parser.\n- A basic set of functions and constants.\n- Data types Number, Complex, Matrix, Unit, String.\n- Examples and documentation.\n- Extensive testing.\n\nVersion 2.0:\n\n- A basic set of functions covering all common mathematical areas.\n- Functions and data types for numeral systems: Bin, Oct, Hex, Dec.\n- Arbitrary precision calculations with a BigNumber data type.\n- Support for derived units (like km/h, kg*m/s2, etc).\n\n\n## License\n\nCopyright (C) 2013 Jos de Jong <wjosdejong@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "_id": "mathjs@0.11.1",
  "dist": {
    "shasum": "69723b27d3abf88a7d0590b2d3d9e85a49844a2c"
  },
  "_from": "mathjs"
}
